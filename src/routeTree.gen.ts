/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as dashboardDashboardRouteImport } from './routes/(dashboard)/dashboard'
import { Route as dashboardDashboardIndexRouteImport } from './routes/(dashboard)/dashboard/index'
import { Route as authRegisterIndexRouteImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardDashboardRoute = dashboardDashboardRouteImport.update({
  id: '/(dashboard)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardDashboardIndexRoute = dashboardDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardDashboardRoute,
} as any)
const authRegisterIndexRoute = authRegisterIndexRouteImport.update({
  id: '/(auth)/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/dashboard': typeof dashboardDashboardRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/dashboard/': typeof dashboardDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/dashboard': typeof dashboardDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/(dashboard)/dashboard': typeof dashboardDashboardRouteWithChildren
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/(dashboard)/dashboard/': typeof dashboardDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/login' | '/register' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/(dashboard)/dashboard'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/(dashboard)/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  dashboardDashboardRoute: typeof dashboardDashboardRouteWithChildren
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/dashboard': {
      id: '/(dashboard)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof dashboardDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/dashboard/': {
      id: '/(dashboard)/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof dashboardDashboardIndexRouteImport
      parentRoute: typeof dashboardDashboardRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface dashboardDashboardRouteChildren {
  dashboardDashboardIndexRoute: typeof dashboardDashboardIndexRoute
}

const dashboardDashboardRouteChildren: dashboardDashboardRouteChildren = {
  dashboardDashboardIndexRoute: dashboardDashboardIndexRoute,
}

const dashboardDashboardRouteWithChildren =
  dashboardDashboardRoute._addFileChildren(dashboardDashboardRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  dashboardDashboardRoute: dashboardDashboardRouteWithChildren,
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
